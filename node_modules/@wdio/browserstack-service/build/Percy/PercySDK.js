import InsightsHandler from '../insights-handler.js';
import TestReporter from '../reporter.js';
import { PercyLogger } from './PercyLogger.js';
import { isUndefined } from '../util.js';
const tryRequire = async function (pkg, fallback) {
    try {
        return (await import(pkg)).default;
    }
    catch {
        return fallback;
    }
};
const percySnapshot = await tryRequire('@percy/selenium-webdriver', null);
const percyAppScreenshot = await tryRequire('@percy/appium-app', {});
/* eslint-disable @typescript-eslint/no-unused-vars */
let snapshotHandler = (...args) => {
    PercyLogger.error('Unsupported driver for percy');
};
if (percySnapshot) {
    snapshotHandler = (browser, snapshotName, options) => {
        if (process.env.PERCY_SNAPSHOT === 'true') {
            let { name, uuid } = InsightsHandler.currentTest;
            if (isUndefined(name)) {
                ({ name, uuid } = TestReporter.currentTest);
            }
            options ||= {};
            options = {
                ...options,
                testCase: name || '',
                thTestCaseExecutionId: uuid || '',
            };
            return percySnapshot(browser, snapshotName, options);
        }
    };
}
export const snapshot = snapshotHandler;
/*
This is a helper method which appends some internal fields
to the options object being sent to Percy methods
*/
const screenshotHelper = (type, driverOrName, nameOrOptions, options) => {
    let { name, uuid } = InsightsHandler.currentTest;
    if (isUndefined(name)) {
        ({ name, uuid } = TestReporter.currentTest);
    }
    if (!driverOrName || typeof driverOrName === 'string') {
        nameOrOptions ||= {};
        if (typeof nameOrOptions === 'object') {
            nameOrOptions = {
                ...nameOrOptions,
                testCase: name || '',
                thTestCaseExecutionId: uuid || '',
            };
        }
    }
    else {
        options ||= {};
        options = {
            ...options,
            testCase: name || '',
            thTestCaseExecutionId: uuid || '',
        };
    }
    if (type === 'app') {
        return percyAppScreenshot(driverOrName, nameOrOptions, options);
    }
    return percySnapshot.percyScreenshot(driverOrName, nameOrOptions, options);
};
/* eslint-disable @typescript-eslint/no-unused-vars */
let screenshotHandler = async (...args) => {
    PercyLogger.error('Unsupported driver for percy');
};
if (percySnapshot && percySnapshot.percyScreenshot) {
    screenshotHandler = (browser, screenshotName, options) => {
        return screenshotHelper('web', browser, screenshotName, options);
    };
}
export const screenshot = screenshotHandler;
/* eslint-disable @typescript-eslint/no-unused-vars */
let screenshotAppHandler = async (...args) => {
    PercyLogger.error('Unsupported driver for percy');
};
if (percyAppScreenshot) {
    screenshotAppHandler = (driverOrName, nameOrOptions, options) => {
        return screenshotHelper('app', driverOrName, nameOrOptions, options);
    };
}
export const screenshotApp = screenshotAppHandler;
