"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("@wdio/logger"));
var _util = require("./util.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const log = (0, _logger.default)('@wdio/lambdatest-service');
const DEFAULT_OPTIONS = {
  setSessionName: true,
  setSessionStatus: true
};
class LambdaRestService {
  constructor(options = {}, capabilities = {}, config = {}) {
    var _this$_config, _this$_config2;
    _defineProperty(this, "_api", void 0);
    _defineProperty(this, "_browser", void 0);
    _defineProperty(this, "_capabilities", void 0);
    _defineProperty(this, "_config", void 0);
    _defineProperty(this, "_failReasons", []);
    _defineProperty(this, "_failures", 0);
    _defineProperty(this, "_failureStatuses", ['failed', 'ambiguous', 'undefined', 'unknown']);
    _defineProperty(this, "_fullTitle", void 0);
    _defineProperty(this, "_isServiceEnabled", true);
    _defineProperty(this, "_options", DEFAULT_OPTIONS);
    _defineProperty(this, "_scenariosThatRan", []);
    _defineProperty(this, "_specsRan", false);
    _defineProperty(this, "_suiteTitle", void 0);
    _defineProperty(this, "_testCnt", 0);
    _defineProperty(this, "_testTitle", void 0);
    _defineProperty(this, "_error", void 0);
    _defineProperty(this, "_ltErrorRemark", void 0);
    _defineProperty(this, "_useScenarioName", void 0);
    _defineProperty(this, "_lambdaCredentials", void 0);
    _defineProperty(this, "_currentTestTitle", void 0);
    this._options = {
      ...DEFAULT_OPTIONS,
      ...options
    };
    this._capabilities = capabilities;
    this._config = config;
    this._testCnt = 0;
    this._failures = 0;
    const strict = Boolean(((_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.cucumberOpts) && ((_this$_config2 = this._config) === null || _this$_config2 === void 0 || (_this$_config2 = _this$_config2.cucumberOpts) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.strict));
    if (strict) {
      this._failureStatuses.push('pending');
    }
  }
  before(caps, specs, browser) {
    this._browser = browser;
    this._scenariosThatRan = [];
  }
  beforeSession(config, capabilities) {
    this._config = {
      ...this._config,
      ...config
    };
    this._capabilities = {
      ...this._capabilities,
      ...capabilities
    };
    const lambdaCredentials = {
      username: this._config.user,
      accessKey: this._config.key,
      isApp: false
    };
    if (this._config.product === 'appAutomation') {
      lambdaCredentials.isApp = true;
    }
    if (this._config.logFile) {
      lambdaCredentials.logFile = this._config.logFile;
    }
    if (this._config.ltErrorRemark === true) {
      this._ltErrorRemark = true;
    }
    if (this._config.useScenarioName === true) {
      this._useScenarioName = true;
    }
    this._isServiceEnabled = lambdaCredentials.username && lambdaCredentials.accessKey;
    this._lambdaCredentials = lambdaCredentials;
  }
  async beforeScenario(world, context) {
    if (this._useScenarioName) {
      var _world$pickle;
      this._testTitle = (world === null || world === void 0 || (_world$pickle = world.pickle) === null || _world$pickle === void 0 ? void 0 : _world$pickle.name) || 'unknown scenario';
    } else if (!this._suiteTitle) {
      var _world$gherkinDocumen, _context$document, _world$pickle2;
      this._suiteTitle = (world === null || world === void 0 || (_world$gherkinDocumen = world.gherkinDocument) === null || _world$gherkinDocumen === void 0 || (_world$gherkinDocumen = _world$gherkinDocumen.feature) === null || _world$gherkinDocumen === void 0 ? void 0 : _world$gherkinDocumen.name) || (context === null || context === void 0 || (_context$document = context.document) === null || _context$document === void 0 || (_context$document = _context$document.feature) === null || _context$document === void 0 ? void 0 : _context$document.name) || (world === null || world === void 0 || (_world$pickle2 = world.pickle) === null || _world$pickle2 === void 0 ? void 0 : _world$pickle2.name) || 'unknown scenario';
    }
    await this.setSessionName(this._testTitle || this._suiteTitle);
  }
  async beforeSuite(suite) {
    this._suiteTitle = suite.title;
    if (suite.title && suite.title !== 'Jasmine__TopLevel__Suite') {
      await this.setSessionName(suite.title);
    }
  }
  async beforeTest(test) {
    if (!this._isServiceEnabled) {
      return;
    }
    if (test && (test === null || test === void 0 ? void 0 : test.parent) !== undefined) {
      this._currentTestTitle = test === null || test === void 0 ? void 0 : test.parent;
      this._currentTestTitle = `${this._currentTestTitle} - ${test === null || test === void 0 ? void 0 : test.title}`;
    } else if (test && (test === null || test === void 0 ? void 0 : test.fullName) !== undefined) {
      this._currentTestTitle = test === null || test === void 0 ? void 0 : test.fullName;
    }
    if (test.title && !this._testTitle) {
      this._testTitle = test.title;
    }
    let suiteTitle = this._suiteTitle;
    if (test.fullName) {
      const testSuiteName = test.fullName;
      if (this._suiteTitle === 'Jasmine__TopLevel__Suite') {
        suiteTitle = testSuiteName;
      } else if (this._suiteTitle) {
        suiteTitle = (0, _util.getParentSuiteName)(this._suiteTitle, testSuiteName);
      }
    }
    await this.setSessionName(suiteTitle, test);
  }
  async beforeFeature(uri, feature) {
    this._suiteTitle = feature.name;
    await this.setSessionName(this._suiteTitle);
  }
  async beforeStep(step) {
    if (!this._suiteTitle || this._suiteTitle == 'unknown scenario') {
      var _step$document, _step$step;
      this._suiteTitle = ((_step$document = step.document) === null || _step$document === void 0 || (_step$document = _step$document.feature) === null || _step$document === void 0 ? void 0 : _step$document.name) || ((_step$step = step.step) === null || _step$step === void 0 || (_step$step = _step$step.scenario) === null || _step$step === void 0 ? void 0 : _step$step.name) || 'unknown scenario';
      await this.setSessionName(this._suiteTitle);
    }
  }
  afterSuite(suite) {
    if (Object.prototype.hasOwnProperty.call(suite, 'error')) {
      ++this._failures;
    }
  }
  afterTest(test, context, {
    error,
    passed
  }) {
    this._specsRan = true;
    if (test._retriedTest && passed) {
      --this._failures;
      return;
    }
    if (test._retriedTest && !passed && typeof test._currentRetry === 'number' && typeof test._retries === 'number' && test._currentRetry < test._retries) {
      return;
    }
    const isJasminePendingError = typeof error === 'string' && error.includes('marked Pending');
    if (!passed && !isJasminePendingError) {
      ++this._failures;
      this._failReasons.push(error && error.message || 'Unknown Error');
      this._error = (error === null || error === void 0 ? void 0 : error.message) || 'Unknown Error';
      if (this._ltErrorRemark && this._error !== null && this._error !== undefined) {
        this._setSessionRemarks(this._error);
      }
    }
  }
  afterScenario(world, result) {
    var _world$result;
    const {
      passed
    } = result || {};
    this._specsRan = true;
    const status = (_world$result = world.result) === null || _world$result === void 0 ? void 0 : _world$result.status.toLowerCase();
    if (status !== 'skipped') {
      this._scenariosThatRan.push(world.pickle.name || 'unknown pickle name');
    }
    if (status && this._failureStatuses.includes(status)) {
      const exception = world.result && world.result.message || (status === 'pending' ? `Some steps/hooks are pending for scenario "${world.pickle.name}"` : 'Unknown Error');
      ++this._failures;
      this._failReasons.push(exception);
    } else if (typeof passed !== 'undefined' && !passed) {
      ++this._failures;
    }
  }
  after(result) {
    if (!this._isServiceEnabled) {
      return;
    }
    let failures = this._failures;
    if (this._config.mochaOpts && this._config.mochaOpts.bail && Boolean(result)) {
      failures = 1;
    }
    if (result === 0) {
      failures = 0;
    }
    const {
      preferScenarioName
    } = this._options;
    if (preferScenarioName && this._scenariosThatRan.length === 1) {
      this._fullTitle = this._scenariosThatRan.pop();
    }
    const status = 'status: ' + (result > 0 ? 'failed' : 'passed');
    if (!this._browser.isMultiremote) {
      log.info(`Update job with sessionId ${this._browser.sessionId}, ${status}`);
      return this._update({
        sessionId: this._browser.sessionId,
        failures: result
      });
    }
    return Promise.all(Object.keys(this._capabilities).map(browserName => {
      log.info(`Update multiremote job for browser '${browserName}' and sessionId ${this._browser[browserName].sessionId}, ${status}`);
      return this._update({
        sessionId: this._browser[browserName].sessionId,
        failures: failures,
        calledOnReload: false,
        browserName: browserName
      });
    }));
  }
  async onReload(oldSessionId, newSessionId) {
    if (!this._isServiceEnabled) {
      return;
    }
    const status = this._failures > 0 ? 'failed' : 'passed';
    if (!this._browser.isMultiremote) {
      log.info(`Update (reloaded) job with sessionId ${oldSessionId}, ${status}`);
      await this._update({
        sessionId: oldSessionId,
        fullTitle: this._currentTestTitle,
        status: status,
        calledOnReload: true
      });
    } else {
      const browserName = this._browser.instances.filter(browserName => this._browser[browserName].sessionId === newSessionId)[0];
      log.info(`Update (reloaded) multiremote job for browser '${browserName}' and sessionId ${oldSessionId}, ${status}`);
      await this._update({
        sessionId: oldSessionId,
        failures: this._failures,
        calledOnReload: true,
        browserName: browserName
      });
    }
    this._failReasons = [];
    this._scenariosThatRan = [];
    delete this._suiteTitle;
    delete this._fullTitle;
  }
  async _update({
    sessionId,
    fullTitle,
    status,
    failures,
    calledOnReload = false,
    browserName
  }) {
    if (!this._options.setSessionStatus) {
      return;
    }
    const sleep = ms => new Promise(r => setTimeout(r, ms));
    await sleep(5000);
    if (calledOnReload) {
      return await this.updateJob({
        sessionId,
        fullTitle,
        status,
        calledOnReload,
        browserName
      });
    }
    return await this.updateJob({
      sessionId,
      _failures: failures,
      calledOnReload,
      browserName
    });
  }
  async updateJob({
    sessionId,
    fullTitle,
    status,
    _failures,
    calledOnReload = false,
    browserName
  }) {
    let body = this.getBody({
      _failures,
      calledOnReload,
      browserName
    });
    if (calledOnReload) {
      body = this.getBody({
        fullTitle,
        status,
        calledOnReload,
        browserName
      });
    }
    try {
      await (0, _util.updateSessionById)(sessionId, body, this._lambdaCredentials);
    } catch (ex) {
      console.log(ex);
    }
    this._failures = 0;
  }
  getBody({
    fullTitle,
    status,
    _failures,
    calledOnReload = false,
    browserName
  }) {
    let body = {};
    if (!(!this._browser.isMultiremote && this._capabilities.name || this._browser.isMultiremote && this._capabilities[browserName].capabilities.name)) {
      body.name = this._fullTitle;
      if (calledOnReload) {
        body.name = fullTitle;
      }
      if (this._capabilities['LT:Options'] && this._capabilities['LT:Options'].name) {
        body.name = this._capabilities['LT:Options'].name;
      }
      if (browserName) {
        body.name = `${browserName}: ${body.name}`;
      }
      if (calledOnReload || this._testCnt) {
        let testCnt = ++this._testCnt;
        if (this._browser.isMultiremote) {
          testCnt = Math.ceil(testCnt / this._browser.instances.length);
        }
        if (!calledOnReload) {
          body.name += ` (${testCnt})`;
        }
      }
    }
    body.status_ind = _failures > 0 ? 'failed' : 'passed';
    if (calledOnReload) {
      body.status_ind = status;
    }
    return body;
  }
  async setSessionName(suiteTitle, test) {
    if (!this._options.setSessionName || !suiteTitle) {
      return;
    }
    let name = this._useScenarioName && this._testTitle ? this._testTitle : suiteTitle;
    if (this._options.sessionNameFormat) {
      name = this._options.sessionNameFormat(this._config, this._capabilities, suiteTitle, test === null || test === void 0 ? void 0 : test.title);
    } else if (test && !test.fullName) {
      const pre = this._options.sessionNamePrependTopLevelSuiteTitle ? `${suiteTitle} - ` : '';
      const post = !this._options.sessionNameOmitTestTitle ? ` - ${test.title}` : '';
      name = `${pre}${test.parent}${post}`;
    }
    if (name !== this.__fullTitle) {
      this.__fullTitle = name;
      await this._setSessionName(name);
    }
  }
  async _setSessionRemarks(err) {
    let replacedString = err.replace(/"/g, "'");
    let errorCustom = `lambda-hook: {"action": "setTestStatus","arguments": {"status":"failed","remark":"${replacedString}"}}`;
    try {
      await this._browser.execute(errorCustom);
    } catch (error) {
      console.log(error);
    }
  }
  async _setSessionName(sessionName) {
    await this._executeCommand(`lambda-name=${sessionName}`);
  }
  async _executeCommand(cmd) {
    if (!this._browser) {
      return;
    }
    if (this._browser.isMultiremote) {
      return Promise.all(Object.keys(this._capabilities).map(async browserName => {
        const browser = this._browser[browserName];
        return await browser.execute(cmd);
      }));
    }
    return await this._browser.execute(cmd);
  }
}
exports.default = LambdaRestService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9nZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidCIsImkiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJyIiwiZSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsImxvZyIsImxvZ2dlciIsIkRFRkFVTFRfT1BUSU9OUyIsInNldFNlc3Npb25OYW1lIiwic2V0U2Vzc2lvblN0YXR1cyIsIkxhbWJkYVJlc3RTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiY2FwYWJpbGl0aWVzIiwiY29uZmlnIiwiX3RoaXMkX2NvbmZpZyIsIl90aGlzJF9jb25maWcyIiwiX29wdGlvbnMiLCJfY2FwYWJpbGl0aWVzIiwiX2NvbmZpZyIsIl90ZXN0Q250IiwiX2ZhaWx1cmVzIiwic3RyaWN0IiwiQm9vbGVhbiIsImN1Y3VtYmVyT3B0cyIsIl9mYWlsdXJlU3RhdHVzZXMiLCJwdXNoIiwiYmVmb3JlIiwiY2FwcyIsInNwZWNzIiwiYnJvd3NlciIsIl9icm93c2VyIiwiX3NjZW5hcmlvc1RoYXRSYW4iLCJiZWZvcmVTZXNzaW9uIiwibGFtYmRhQ3JlZGVudGlhbHMiLCJ1c2VybmFtZSIsInVzZXIiLCJhY2Nlc3NLZXkiLCJpc0FwcCIsInByb2R1Y3QiLCJsb2dGaWxlIiwibHRFcnJvclJlbWFyayIsIl9sdEVycm9yUmVtYXJrIiwidXNlU2NlbmFyaW9OYW1lIiwiX3VzZVNjZW5hcmlvTmFtZSIsIl9pc1NlcnZpY2VFbmFibGVkIiwiX2xhbWJkYUNyZWRlbnRpYWxzIiwiYmVmb3JlU2NlbmFyaW8iLCJ3b3JsZCIsImNvbnRleHQiLCJfd29ybGQkcGlja2xlIiwiX3Rlc3RUaXRsZSIsInBpY2tsZSIsIm5hbWUiLCJfc3VpdGVUaXRsZSIsIl93b3JsZCRnaGVya2luRG9jdW1lbiIsIl9jb250ZXh0JGRvY3VtZW50IiwiX3dvcmxkJHBpY2tsZTIiLCJnaGVya2luRG9jdW1lbnQiLCJmZWF0dXJlIiwiZG9jdW1lbnQiLCJiZWZvcmVTdWl0ZSIsInN1aXRlIiwidGl0bGUiLCJiZWZvcmVUZXN0IiwidGVzdCIsInBhcmVudCIsInVuZGVmaW5lZCIsIl9jdXJyZW50VGVzdFRpdGxlIiwiZnVsbE5hbWUiLCJzdWl0ZVRpdGxlIiwidGVzdFN1aXRlTmFtZSIsImdldFBhcmVudFN1aXRlTmFtZSIsImJlZm9yZUZlYXR1cmUiLCJ1cmkiLCJiZWZvcmVTdGVwIiwic3RlcCIsIl9zdGVwJGRvY3VtZW50IiwiX3N0ZXAkc3RlcCIsInNjZW5hcmlvIiwiYWZ0ZXJTdWl0ZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiYWZ0ZXJUZXN0IiwiZXJyb3IiLCJwYXNzZWQiLCJfc3BlY3NSYW4iLCJfcmV0cmllZFRlc3QiLCJfY3VycmVudFJldHJ5IiwiX3JldHJpZXMiLCJpc0phc21pbmVQZW5kaW5nRXJyb3IiLCJpbmNsdWRlcyIsIl9mYWlsUmVhc29ucyIsIm1lc3NhZ2UiLCJfZXJyb3IiLCJfc2V0U2Vzc2lvblJlbWFya3MiLCJhZnRlclNjZW5hcmlvIiwicmVzdWx0IiwiX3dvcmxkJHJlc3VsdCIsInN0YXR1cyIsInRvTG93ZXJDYXNlIiwiZXhjZXB0aW9uIiwiYWZ0ZXIiLCJmYWlsdXJlcyIsIm1vY2hhT3B0cyIsImJhaWwiLCJwcmVmZXJTY2VuYXJpb05hbWUiLCJsZW5ndGgiLCJfZnVsbFRpdGxlIiwicG9wIiwiaXNNdWx0aXJlbW90ZSIsImluZm8iLCJzZXNzaW9uSWQiLCJfdXBkYXRlIiwiUHJvbWlzZSIsImFsbCIsImtleXMiLCJtYXAiLCJicm93c2VyTmFtZSIsImNhbGxlZE9uUmVsb2FkIiwib25SZWxvYWQiLCJvbGRTZXNzaW9uSWQiLCJuZXdTZXNzaW9uSWQiLCJmdWxsVGl0bGUiLCJpbnN0YW5jZXMiLCJmaWx0ZXIiLCJzbGVlcCIsIm1zIiwic2V0VGltZW91dCIsInVwZGF0ZUpvYiIsImJvZHkiLCJnZXRCb2R5IiwidXBkYXRlU2Vzc2lvbkJ5SWQiLCJleCIsImNvbnNvbGUiLCJ0ZXN0Q250IiwiTWF0aCIsImNlaWwiLCJzdGF0dXNfaW5kIiwic2Vzc2lvbk5hbWVGb3JtYXQiLCJwcmUiLCJzZXNzaW9uTmFtZVByZXBlbmRUb3BMZXZlbFN1aXRlVGl0bGUiLCJwb3N0Iiwic2Vzc2lvbk5hbWVPbWl0VGVzdFRpdGxlIiwiX19mdWxsVGl0bGUiLCJfc2V0U2Vzc2lvbk5hbWUiLCJlcnIiLCJyZXBsYWNlZFN0cmluZyIsInJlcGxhY2UiLCJlcnJvckN1c3RvbSIsImV4ZWN1dGUiLCJzZXNzaW9uTmFtZSIsIl9leGVjdXRlQ29tbWFuZCIsImNtZCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvc2VydmljZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcblxuaW1wb3J0IHsgZ2V0UGFyZW50U3VpdGVOYW1lLCB1cGRhdGVTZXNzaW9uQnlJZCB9IGZyb20gJy4vdXRpbC5qcydcblxuY29uc3QgbG9nID0gbG9nZ2VyKCdAd2Rpby9sYW1iZGF0ZXN0LXNlcnZpY2UnKVxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi90eXBlcy5qcycpLkxUT3B0aW9ucyAmIGltcG9ydCgnLi90eXBlcy5qcycpLlNlc3Npb25OYW1lT3B0aW9uc30gKi9cbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgc2V0U2Vzc2lvbk5hbWU6IHRydWUsXG4gIHNldFNlc3Npb25TdGF0dXM6IHRydWUsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYW1iZGFSZXN0U2VydmljZSB7XG4gIF9hcGk7XG4gIF9icm93c2VyO1xuICBfY2FwYWJpbGl0aWVzO1xuICBfY29uZmlnO1xuICBfZmFpbFJlYXNvbnMgPSBbXTtcbiAgX2ZhaWx1cmVzID0gMDtcbiAgX2ZhaWx1cmVTdGF0dXNlcyA9IFsnZmFpbGVkJywgJ2FtYmlndW91cycsICd1bmRlZmluZWQnLCAndW5rbm93biddO1xuICBfZnVsbFRpdGxlO1xuICBfaXNTZXJ2aWNlRW5hYmxlZCA9IHRydWU7XG4gIF9vcHRpb25zID0gREVGQVVMVF9PUFRJT05TO1xuICBfc2NlbmFyaW9zVGhhdFJhbiA9IFtdO1xuICBfc3BlY3NSYW4gPSBmYWxzZTtcbiAgX3N1aXRlVGl0bGU7XG4gIF90ZXN0Q250ID0gMDtcbiAgX3Rlc3RUaXRsZTtcbiAgX2Vycm9yO1xuICBfbHRFcnJvclJlbWFyaztcbiAgX3VzZVNjZW5hcmlvTmFtZTtcbiAgX2xhbWJkYUNyZWRlbnRpYWxzO1xuICBfY3VycmVudFRlc3RUaXRsZTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30sIGNhcGFiaWxpdGllcyA9IHt9LCBjb25maWcgPSB7fSkge1xuICAgIHRoaXMuX29wdGlvbnMgPSB7IC4uLkRFRkFVTFRfT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuX2NhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcztcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fdGVzdENudCA9IDA7XG4gICAgdGhpcy5fZmFpbHVyZXMgPSAwO1xuICAgIC8vIEN1Y3VtYmVyIHNwZWNpZmljXG4gICAgY29uc3Qgc3RyaWN0ID0gQm9vbGVhbih0aGlzLl9jb25maWc/LmN1Y3VtYmVyT3B0cyAmJiB0aGlzLl9jb25maWc/LmN1Y3VtYmVyT3B0cz8uc3RyaWN0KTtcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1Y3VtYmVyL2N1Y3VtYmVyLWpzL2Jsb2IvbWFzdGVyL3NyYy9ydW50aW1lL2luZGV4LnRzI0wxMzZcbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICB0aGlzLl9mYWlsdXJlU3RhdHVzZXMucHVzaCgncGVuZGluZycpO1xuICAgIH1cbiAgfVxuXG4gIGJlZm9yZShjYXBzLCBzcGVjcywgYnJvd3Nlcikge1xuICAgIHRoaXMuX2Jyb3dzZXIgPSBicm93c2VyO1xuICAgIHRoaXMuX3NjZW5hcmlvc1RoYXRSYW4gPSBbXTtcbiAgfVxuXG4gIGJlZm9yZVNlc3Npb24oY29uZmlnLCBjYXBhYmlsaXRpZXMpIHtcbiAgICB0aGlzLl9jb25maWcgPSB7IC4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnIH07XG4gICAgdGhpcy5fY2FwYWJpbGl0aWVzID0geyAuLi50aGlzLl9jYXBhYmlsaXRpZXMsIC4uLmNhcGFiaWxpdGllcyB9O1xuICAgIGNvbnN0IGxhbWJkYUNyZWRlbnRpYWxzID0ge1xuICAgICAgdXNlcm5hbWU6IHRoaXMuX2NvbmZpZy51c2VyLFxuICAgICAgYWNjZXNzS2V5OiB0aGlzLl9jb25maWcua2V5LFxuICAgICAgaXNBcHAgOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnByb2R1Y3QgPT09ICdhcHBBdXRvbWF0aW9uJykge1xuICAgICAgbGFtYmRhQ3JlZGVudGlhbHMuaXNBcHAgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcubG9nRmlsZSkge1xuICAgICAgbGFtYmRhQ3JlZGVudGlhbHMubG9nRmlsZSA9IHRoaXMuX2NvbmZpZy5sb2dGaWxlO1xuICAgIH1cbiAgICBpZih0aGlzLl9jb25maWcubHRFcnJvclJlbWFyayA9PT10cnVlKVxuICAgIHtcbiAgICAgIHRoaXMuX2x0RXJyb3JSZW1hcms9dHJ1ZTtcbiAgICB9XG4gICAgLy8gQ3VjdW1iZXIgc3BlY2lmaWMgb3B0aW9uIHRvIHNldCB0ZXN0IG5hbWUgZnJvbSBzY2VuYXJpb1xuICAgIGlmKHRoaXMuX2NvbmZpZy51c2VTY2VuYXJpb05hbWUgPT09IHRydWUpXG4gICAge1xuICAgICAgdGhpcy5fdXNlU2NlbmFyaW9OYW1lPXRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5faXNTZXJ2aWNlRW5hYmxlZCA9IGxhbWJkYUNyZWRlbnRpYWxzLnVzZXJuYW1lICYmIGxhbWJkYUNyZWRlbnRpYWxzLmFjY2Vzc0tleTtcbiAgICB0aGlzLl9sYW1iZGFDcmVkZW50aWFscz1sYW1iZGFDcmVkZW50aWFscztcbiAgICBcbiAgfVxuXG4gIGFzeW5jIGJlZm9yZVNjZW5hcmlvKHdvcmxkLCBjb250ZXh0KSB7XG4gICAgaWYgKHRoaXMuX3VzZVNjZW5hcmlvTmFtZSkge1xuICAgICAgdGhpcy5fdGVzdFRpdGxlID0gd29ybGQ/LnBpY2tsZT8ubmFtZSB8fCAndW5rbm93biBzY2VuYXJpbyc7XG4gICAgfSBlbHNlIGlmICghdGhpcy5fc3VpdGVUaXRsZSkge1xuICAgICAgdGhpcy5fc3VpdGVUaXRsZSA9XG4gICAgICAgIHdvcmxkPy5naGVya2luRG9jdW1lbnQ/LmZlYXR1cmU/Lm5hbWUgfHxcbiAgICAgICAgY29udGV4dD8uZG9jdW1lbnQ/LmZlYXR1cmU/Lm5hbWUgfHxcbiAgICAgICAgd29ybGQ/LnBpY2tsZT8ubmFtZSB8fFxuICAgICAgICAndW5rbm93biBzY2VuYXJpbyc7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuc2V0U2Vzc2lvbk5hbWUodGhpcy5fdGVzdFRpdGxlIHx8IHRoaXMuX3N1aXRlVGl0bGUpO1xuICB9XG5cbiAgYXN5bmMgYmVmb3JlU3VpdGUoc3VpdGUpIHtcbiAgICB0aGlzLl9zdWl0ZVRpdGxlID0gc3VpdGUudGl0bGU7XG5cbiAgICBpZiAoc3VpdGUudGl0bGUgJiYgc3VpdGUudGl0bGUgIT09ICdKYXNtaW5lX19Ub3BMZXZlbF9fU3VpdGUnKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldFNlc3Npb25OYW1lKHN1aXRlLnRpdGxlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBiZWZvcmVUZXN0KHRlc3QpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2VydmljZUVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGVzdCAmJiB0ZXN0Py5wYXJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fY3VycmVudFRlc3RUaXRsZSA9IHRlc3Q/LnBhcmVudDtcbiAgICAgIHRoaXMuX2N1cnJlbnRUZXN0VGl0bGUgPSBgJHt0aGlzLl9jdXJyZW50VGVzdFRpdGxlfSAtICR7dGVzdD8udGl0bGV9YDtcbiAgfSBlbHNlIGlmICh0ZXN0ICYmIHRlc3Q/LmZ1bGxOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUZXN0VGl0bGUgPSB0ZXN0Py5mdWxsTmFtZTtcbiAgfVxuXG4gICAgaWYgKHRlc3QudGl0bGUgJiYgIXRoaXMuX3Rlc3RUaXRsZSkge1xuICAgICAgdGhpcy5fdGVzdFRpdGxlID0gdGVzdC50aXRsZTtcbiAgICB9XG5cbiAgICBsZXQgc3VpdGVUaXRsZSA9IHRoaXMuX3N1aXRlVGl0bGU7XG5cbiAgICBpZiAodGVzdC5mdWxsTmFtZSkge1xuICAgICAgLy8gRm9yIEphc21pbmUsIGBzdWl0ZS50aXRsZWAgaXMgYEphc21pbmVfX1RvcExldmVsX19TdWl0ZWAuXG4gICAgICAvLyBUaGlzIHR3ZWFrIGFsbG93cyB1cyB0byBzZXQgdGhlIHJlYWwgc3VpdGUgbmFtZS5cbiAgICAgIGNvbnN0IHRlc3RTdWl0ZU5hbWUgPSB0ZXN0LmZ1bGxOYW1lO1xuICAgICAgaWYgKHRoaXMuX3N1aXRlVGl0bGUgPT09ICdKYXNtaW5lX19Ub3BMZXZlbF9fU3VpdGUnKSB7XG4gICAgICAgIHN1aXRlVGl0bGUgPSB0ZXN0U3VpdGVOYW1lO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdWl0ZVRpdGxlKSB7XG4gICAgICAgIHN1aXRlVGl0bGUgPSBnZXRQYXJlbnRTdWl0ZU5hbWUodGhpcy5fc3VpdGVUaXRsZSwgdGVzdFN1aXRlTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5zZXRTZXNzaW9uTmFtZShzdWl0ZVRpdGxlLCB0ZXN0KTtcbiAgfVxuXG4gIGFzeW5jIGJlZm9yZUZlYXR1cmUodXJpLCBmZWF0dXJlKSB7XG4gICAgdGhpcy5fc3VpdGVUaXRsZSA9IGZlYXR1cmUubmFtZTtcbiAgICBhd2FpdCB0aGlzLnNldFNlc3Npb25OYW1lKHRoaXMuX3N1aXRlVGl0bGUpO1xuICB9XG5cbiAgYXN5bmMgYmVmb3JlU3RlcChzdGVwKSB7XG4gICAgaWYgKCF0aGlzLl9zdWl0ZVRpdGxlIHx8IHRoaXMuX3N1aXRlVGl0bGUgPT0gJ3Vua25vd24gc2NlbmFyaW8nKSB7XG4gICAgICB0aGlzLl9zdWl0ZVRpdGxlID1cbiAgICAgICAgc3RlcC5kb2N1bWVudD8uZmVhdHVyZT8ubmFtZSB8fFxuICAgICAgICBzdGVwLnN0ZXA/LnNjZW5hcmlvPy5uYW1lIHx8XG4gICAgICAgICd1bmtub3duIHNjZW5hcmlvJztcbiAgICAgIGF3YWl0IHRoaXMuc2V0U2Vzc2lvbk5hbWUodGhpcy5fc3VpdGVUaXRsZSk7XG4gICAgfVxuICB9XG5cbiAgYWZ0ZXJTdWl0ZShzdWl0ZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3VpdGUsICdlcnJvcicpKSB7XG4gICAgICArK3RoaXMuX2ZhaWx1cmVzO1xuICAgIH1cbiAgfVxuXG4gIGFmdGVyVGVzdCh0ZXN0LCBjb250ZXh0LCB7IGVycm9yLCBwYXNzZWQgfSkge1xuICAgIHRoaXMuX3NwZWNzUmFuID0gdHJ1ZTtcblxuICAgIC8vIHJlbW92ZSBmYWlsdXJlIGlmIHRlc3Qgd2FzIHJldHJpZWQgYW5kIHBhc3NlZFxuICAgIC8vIChNb2NoYSBvbmx5KVxuICAgIGlmICh0ZXN0Ll9yZXRyaWVkVGVzdCAmJiBwYXNzZWQpIHtcbiAgICAgIC0tdGhpcy5fZmFpbHVyZXM7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZG9uJ3QgYnVtcCBmYWlsdXJlIG51bWJlciBpZiB0ZXN0IHdhcyByZXRyaWVkIGFuZCBzdGlsbCBmYWlsZWRcbiAgICAvLyAoTW9jaGEgb25seSlcbiAgICBpZiAoXG4gICAgICB0ZXN0Ll9yZXRyaWVkVGVzdCAmJlxuICAgICAgIXBhc3NlZCAmJlxuICAgICAgKFxuICAgICAgICB0eXBlb2YgdGVzdC5fY3VycmVudFJldHJ5ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgdGVzdC5fcmV0cmllcyA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdGVzdC5fY3VycmVudFJldHJ5IDwgdGVzdC5fcmV0cmllc1xuICAgICAgKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzSmFzbWluZVBlbmRpbmdFcnJvciA9IHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycgJiYgZXJyb3IuaW5jbHVkZXMoJ21hcmtlZCBQZW5kaW5nJyk7XG4gICAgaWYgKCFwYXNzZWQgJiYgIWlzSmFzbWluZVBlbmRpbmdFcnJvcikge1xuICAgICAgKyt0aGlzLl9mYWlsdXJlcztcbiAgICAgIHRoaXMuX2ZhaWxSZWFzb25zLnB1c2goKGVycm9yICYmIGVycm9yLm1lc3NhZ2UpIHx8ICdVbmtub3duIEVycm9yJylcbiAgICAgIHRoaXMuX2Vycm9yPWVycm9yPy5tZXNzYWdlIHx8ICdVbmtub3duIEVycm9yJztcbiAgICAgIGlmICh0aGlzLl9sdEVycm9yUmVtYXJrICYmIHRoaXMuX2Vycm9yICE9PSBudWxsICYmIHRoaXMuX2Vycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fc2V0U2Vzc2lvblJlbWFya3ModGhpcy5fZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFmdGVyU2NlbmFyaW8od29ybGQsIHJlc3VsdCkge1xuICAgIGNvbnN0IHsgcGFzc2VkIH0gPSByZXN1bHQgfHwge307XG4gICAgdGhpcy5fc3BlY3NSYW4gPSB0cnVlO1xuICAgIGNvbnN0IHN0YXR1cyA9IHdvcmxkLnJlc3VsdD8uc3RhdHVzLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHN0YXR1cyAhPT0gJ3NraXBwZWQnKSB7XG4gICAgICB0aGlzLl9zY2VuYXJpb3NUaGF0UmFuLnB1c2god29ybGQucGlja2xlLm5hbWUgfHwgJ3Vua25vd24gcGlja2xlIG5hbWUnKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyAmJiB0aGlzLl9mYWlsdXJlU3RhdHVzZXMuaW5jbHVkZXMoc3RhdHVzKSkge1xuICAgICAgY29uc3QgZXhjZXB0aW9uID0gKFxuICAgICAgICAod29ybGQucmVzdWx0ICYmIHdvcmxkLnJlc3VsdC5tZXNzYWdlKSB8fFxuICAgICAgICAoc3RhdHVzID09PSAncGVuZGluZydcbiAgICAgICAgICA/IGBTb21lIHN0ZXBzL2hvb2tzIGFyZSBwZW5kaW5nIGZvciBzY2VuYXJpbyBcIiR7d29ybGQucGlja2xlLm5hbWV9XCJgXG4gICAgICAgICAgOiAnVW5rbm93biBFcnJvcidcbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgKyt0aGlzLl9mYWlsdXJlcztcbiAgICAgIHRoaXMuX2ZhaWxSZWFzb25zLnB1c2goZXhjZXB0aW9uKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhc3NlZCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXBhc3NlZCkge1xuICAgICAgKyt0aGlzLl9mYWlsdXJlcztcbiAgICB9XG4gIH1cblxuICBhZnRlcihyZXN1bHQpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2VydmljZUVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZmFpbHVyZXMgPSB0aGlzLl9mYWlsdXJlcztcblxuICAgIC8vIHNldCBfZmFpbHVyZXMgaWYgdXNlciBoYXMgYmFpbCBvcHRpb24gc2V0IGluIHdoaWNoIGNhc2UgYWZ0ZXJUZXN0IGFuZFxuICAgIC8vIGFmdGVyU3VpdGUgYXJlbid0IGV4ZWN1dGVkIGJlZm9yZSBhZnRlciBob29rXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5tb2NoYU9wdHMgJiYgdGhpcy5fY29uZmlnLm1vY2hhT3B0cy5iYWlsICYmIEJvb2xlYW4ocmVzdWx0KSkge1xuICAgICAgZmFpbHVyZXMgPSAxO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQgPT09IDApIHtcbiAgICAgIGZhaWx1cmVzID0gMDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHByZWZlclNjZW5hcmlvTmFtZSB9ID0gdGhpcy5fb3B0aW9ucztcbiAgICAvLyBGb3IgQ3VjdW1iZXI6IENoZWNrcyBzY2VuYXJpb3MgdGhhdCByYW4gKGkuZS4gbm90IHNraXBwZWQpIG9uIHRoZSBzZXNzaW9uXG4gICAgLy8gT25seSAxIFNjZW5hcmlvIHJhbiBhbmQgb3B0aW9uIGVuYWJsZWQgPT4gUmVkZWZpbmUgc2Vzc2lvbiBuYW1lIHRvIFNjZW5hcmlvJ3MgbmFtZVxuICAgIGlmIChwcmVmZXJTY2VuYXJpb05hbWUgJiYgdGhpcy5fc2NlbmFyaW9zVGhhdFJhbi5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuX2Z1bGxUaXRsZSA9IHRoaXMuX3NjZW5hcmlvc1RoYXRSYW4ucG9wKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdHVzID0gJ3N0YXR1czogJyArIChyZXN1bHQgPiAwID8gJ2ZhaWxlZCcgOiAncGFzc2VkJyk7XG5cbiAgICBpZiAoIXRoaXMuX2Jyb3dzZXIuaXNNdWx0aXJlbW90ZSkge1xuICAgICAgbG9nLmluZm8oYFVwZGF0ZSBqb2Igd2l0aCBzZXNzaW9uSWQgJHt0aGlzLl9icm93c2VyLnNlc3Npb25JZH0sICR7c3RhdHVzfWApO1xuICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh7IHNlc3Npb25JZDogdGhpcy5fYnJvd3Nlci5zZXNzaW9uSWQsIGZhaWx1cmVzOiByZXN1bHQgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKHRoaXMuX2NhcGFiaWxpdGllcykubWFwKGJyb3dzZXJOYW1lID0+IHtcbiAgICAgIGxvZy5pbmZvKGBVcGRhdGUgbXVsdGlyZW1vdGUgam9iIGZvciBicm93c2VyICcke2Jyb3dzZXJOYW1lfScgYW5kIHNlc3Npb25JZCAke3RoaXMuX2Jyb3dzZXJbYnJvd3Nlck5hbWVdLnNlc3Npb25JZH0sICR7c3RhdHVzfWApO1xuICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh7IHNlc3Npb25JZDogdGhpcy5fYnJvd3Nlclticm93c2VyTmFtZV0uc2Vzc2lvbklkLCBmYWlsdXJlczogZmFpbHVyZXMsIGNhbGxlZE9uUmVsb2FkOiBmYWxzZSwgYnJvd3Nlck5hbWU6IGJyb3dzZXJOYW1lIH0pO1xuICAgIH0pKTtcbiAgfVxuXG4gIGFzeW5jIG9uUmVsb2FkKG9sZFNlc3Npb25JZCwgbmV3U2Vzc2lvbklkKSB7XG4gICAgaWYgKCF0aGlzLl9pc1NlcnZpY2VFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdHVzID0gKHRoaXMuX2ZhaWx1cmVzID4gMCA/ICdmYWlsZWQnIDogJ3Bhc3NlZCcpO1xuXG4gICAgaWYgKCF0aGlzLl9icm93c2VyLmlzTXVsdGlyZW1vdGUpIHtcbiAgICAgIGxvZy5pbmZvKGBVcGRhdGUgKHJlbG9hZGVkKSBqb2Igd2l0aCBzZXNzaW9uSWQgJHtvbGRTZXNzaW9uSWR9LCAke3N0YXR1c31gKTtcblxuICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlKHsgc2Vzc2lvbklkOiBvbGRTZXNzaW9uSWQsIGZ1bGxUaXRsZTogdGhpcy5fY3VycmVudFRlc3RUaXRsZSwgc3RhdHVzOiBzdGF0dXMsIGNhbGxlZE9uUmVsb2FkOiB0cnVlIH0pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJyb3dzZXJOYW1lID0gdGhpcy5fYnJvd3Nlci5pbnN0YW5jZXMuZmlsdGVyKGJyb3dzZXJOYW1lID0+IHRoaXMuX2Jyb3dzZXJbYnJvd3Nlck5hbWVdLnNlc3Npb25JZCA9PT0gbmV3U2Vzc2lvbklkKVswXTtcbiAgICAgIGxvZy5pbmZvKGBVcGRhdGUgKHJlbG9hZGVkKSBtdWx0aXJlbW90ZSBqb2IgZm9yIGJyb3dzZXIgJyR7YnJvd3Nlck5hbWV9JyBhbmQgc2Vzc2lvbklkICR7b2xkU2Vzc2lvbklkfSwgJHtzdGF0dXN9YCk7XG4gICAgICBhd2FpdCB0aGlzLl91cGRhdGUoeyBzZXNzaW9uSWQgOiBvbGRTZXNzaW9uSWQsIGZhaWx1cmVzOnRoaXMuX2ZhaWx1cmVzLCBjYWxsZWRPblJlbG9hZDogdHJ1ZSwgYnJvd3Nlck5hbWU6IGJyb3dzZXJOYW1lIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX2ZhaWxSZWFzb25zID0gW107XG4gICAgdGhpcy5fc2NlbmFyaW9zVGhhdFJhbiA9IFtdO1xuICAgIGRlbGV0ZSB0aGlzLl9zdWl0ZVRpdGxlO1xuICAgIGRlbGV0ZSB0aGlzLl9mdWxsVGl0bGU7XG4gIH1cblxuICBhc3luYyBfdXBkYXRlKHsgc2Vzc2lvbklkLCBmdWxsVGl0bGUsIHN0YXR1cywgZmFpbHVyZXMsIGNhbGxlZE9uUmVsb2FkID0gZmFsc2UsIGJyb3dzZXJOYW1lIH0pIHtcbiAgICBpZiAoIXRoaXMuX29wdGlvbnMuc2V0U2Vzc2lvblN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzbGVlcCA9IG1zID0+IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBtcykpO1xuICAgIGF3YWl0IHNsZWVwKDUwMDApO1xuICAgIGlmIChjYWxsZWRPblJlbG9hZCl7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGVKb2IoeyBzZXNzaW9uSWQsIGZ1bGxUaXRsZSwgc3RhdHVzLCBjYWxsZWRPblJlbG9hZCwgYnJvd3Nlck5hbWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZUpvYih7IHNlc3Npb25JZCwgX2ZhaWx1cmVzOiBmYWlsdXJlcywgY2FsbGVkT25SZWxvYWQsIGJyb3dzZXJOYW1lIH0pO1xuICBcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUpvYih7IHNlc3Npb25JZCwgZnVsbFRpdGxlLCBzdGF0dXMsIF9mYWlsdXJlcywgY2FsbGVkT25SZWxvYWQgPSBmYWxzZSwgYnJvd3Nlck5hbWUgfSkge1xuICAgIFxuICAgIGxldCBib2R5ID0gdGhpcy5nZXRCb2R5KHsgX2ZhaWx1cmVzLCBjYWxsZWRPblJlbG9hZCwgYnJvd3Nlck5hbWUgfSk7XG4gICAgaWYoY2FsbGVkT25SZWxvYWQpe1xuICAgICAgIGJvZHkgPSB0aGlzLmdldEJvZHkoeyBmdWxsVGl0bGUsIHN0YXR1cywgY2FsbGVkT25SZWxvYWQsIGJyb3dzZXJOYW1lIH0pO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdXBkYXRlU2Vzc2lvbkJ5SWQoc2Vzc2lvbklkLCBib2R5LCB0aGlzLl9sYW1iZGFDcmVkZW50aWFscyk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnNvbGUubG9nKGV4KTtcbiAgICB9XG4gICAgdGhpcy5fZmFpbHVyZXMgPSAwO1xuICB9XG5cbiAgZ2V0Qm9keSh7IGZ1bGxUaXRsZSwgc3RhdHVzLCBfZmFpbHVyZXMsIGNhbGxlZE9uUmVsb2FkID0gZmFsc2UsIGJyb3dzZXJOYW1lIH0pIHtcbiAgICBsZXQgYm9keSA9IHt9O1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgICghdGhpcy5fYnJvd3Nlci5pc011bHRpcmVtb3RlICYmIHRoaXMuX2NhcGFiaWxpdGllcy5uYW1lKSB8fFxuICAgICAgICAodGhpcy5fYnJvd3Nlci5pc011bHRpcmVtb3RlICYmXG4gICAgICAgICAgdGhpcy5fY2FwYWJpbGl0aWVzW2Jyb3dzZXJOYW1lXS5jYXBhYmlsaXRpZXMubmFtZSlcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGJvZHkubmFtZSA9IHRoaXMuX2Z1bGxUaXRsZTtcbiAgICAgIGlmKGNhbGxlZE9uUmVsb2FkKXtcbiAgICAgICAgYm9keS5uYW1lPWZ1bGxUaXRsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NhcGFiaWxpdGllc1snTFQ6T3B0aW9ucyddICYmIHRoaXMuX2NhcGFiaWxpdGllc1snTFQ6T3B0aW9ucyddLm5hbWUpIHtcbiAgICAgICAgYm9keS5uYW1lID0gdGhpcy5fY2FwYWJpbGl0aWVzWydMVDpPcHRpb25zJ10ubmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJyb3dzZXJOYW1lKSB7XG4gICAgICAgIGJvZHkubmFtZSA9IGAke2Jyb3dzZXJOYW1lfTogJHtib2R5Lm5hbWV9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxlZE9uUmVsb2FkIHx8IHRoaXMuX3Rlc3RDbnQpIHtcbiAgICAgICAgbGV0IHRlc3RDbnQgPSArK3RoaXMuX3Rlc3RDbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuX2Jyb3dzZXIuaXNNdWx0aXJlbW90ZSkge1xuICAgICAgICAgIHRlc3RDbnQgPSBNYXRoLmNlaWwodGVzdENudCAvIHRoaXMuX2Jyb3dzZXIuaW5zdGFuY2VzLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNhbGxlZE9uUmVsb2FkKXtcbiAgICAgICAgICBib2R5Lm5hbWUgKz0gYCAoJHt0ZXN0Q250fSlgO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGJvZHkuc3RhdHVzX2luZCA9IF9mYWlsdXJlcyA+IDAgPyAnZmFpbGVkJyA6ICdwYXNzZWQnO1xuICAgIGlmIChjYWxsZWRPblJlbG9hZCl7XG4gICAgICBib2R5LnN0YXR1c19pbmQgPSBzdGF0dXM7XG4gICAgfVxuICAgIHJldHVybiBib2R5O1xuICB9XG5cbiAgYXN5bmMgc2V0U2Vzc2lvbk5hbWUoc3VpdGVUaXRsZSwgdGVzdCkge1xuICAgIGlmICghdGhpcy5fb3B0aW9ucy5zZXRTZXNzaW9uTmFtZSB8fCAhc3VpdGVUaXRsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBuYW1lID0gdGhpcy5fdXNlU2NlbmFyaW9OYW1lICYmIHRoaXMuX3Rlc3RUaXRsZSA/IHRoaXMuX3Rlc3RUaXRsZSA6IHN1aXRlVGl0bGU7XG4gICAgaWYgKHRoaXMuX29wdGlvbnMuc2Vzc2lvbk5hbWVGb3JtYXQpIHtcbiAgICAgIG5hbWUgPSB0aGlzLl9vcHRpb25zLnNlc3Npb25OYW1lRm9ybWF0KFxuICAgICAgICAgIHRoaXMuX2NvbmZpZyxcbiAgICAgICAgICB0aGlzLl9jYXBhYmlsaXRpZXMsXG4gICAgICAgICAgc3VpdGVUaXRsZSxcbiAgICAgICAgICB0ZXN0Py50aXRsZVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRlc3QgJiYgIXRlc3QuZnVsbE5hbWUpIHtcbiAgICAgIC8vIE1vY2hhXG4gICAgICBjb25zdCBwcmUgPSB0aGlzLl9vcHRpb25zLnNlc3Npb25OYW1lUHJlcGVuZFRvcExldmVsU3VpdGVUaXRsZSA/IGAke3N1aXRlVGl0bGV9IC0gYCA6ICcnO1xuICAgICAgY29uc3QgcG9zdCA9ICF0aGlzLl9vcHRpb25zLnNlc3Npb25OYW1lT21pdFRlc3RUaXRsZSA/IGAgLSAke3Rlc3QudGl0bGV9YCA6ICcnO1xuICAgICAgbmFtZSA9IGAke3ByZX0ke3Rlc3QucGFyZW50fSR7cG9zdH1gO1xuICAgIH1cblxuICAgIGlmIChuYW1lICE9PSB0aGlzLl9fZnVsbFRpdGxlKSB7XG4gICAgICB0aGlzLl9fZnVsbFRpdGxlID0gbmFtZTtcbiAgICAgIGF3YWl0IHRoaXMuX3NldFNlc3Npb25OYW1lKG5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9zZXRTZXNzaW9uUmVtYXJrcyhlcnIpe1xuICAgIGxldCByZXBsYWNlZFN0cmluZyA9IGVyci5yZXBsYWNlKC9cIi9nLCBcIidcIik7XG4gICAgbGV0IGVycm9yQ3VzdG9tID1gbGFtYmRhLWhvb2s6IHtcImFjdGlvblwiOiBcInNldFRlc3RTdGF0dXNcIixcImFyZ3VtZW50c1wiOiB7XCJzdGF0dXNcIjpcImZhaWxlZFwiLFwicmVtYXJrXCI6XCIke3JlcGxhY2VkU3RyaW5nfVwifX1gO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLl9icm93c2VyLmV4ZWN1dGUoZXJyb3JDdXN0b20pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICB9IFxuICB9XG5cbiAgYXN5bmMgX3NldFNlc3Npb25OYW1lKHNlc3Npb25OYW1lKSB7XG4gICAgYXdhaXQgdGhpcy5fZXhlY3V0ZUNvbW1hbmQoYGxhbWJkYS1uYW1lPSR7c2Vzc2lvbk5hbWV9YCk7XG4gIH1cblxuICBhc3luYyBfZXhlY3V0ZUNvbW1hbmQoY21kKSB7XG4gICAgaWYgKCF0aGlzLl9icm93c2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9icm93c2VyLmlzTXVsdGlyZW1vdGUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyh0aGlzLl9jYXBhYmlsaXRpZXMpLm1hcChhc3luYyAoYnJvd3Nlck5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgYnJvd3NlciA9IHRoaXMuX2Jyb3dzZXJbYnJvd3Nlck5hbWVdO1xuICAgICAgICByZXR1cm4gYXdhaXQgYnJvd3Nlci5leGVjdXRlKGNtZCk7XG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9icm93c2VyLmV4ZWN1dGUoY21kKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQWlFLFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsZ0JBQUFILEdBQUEsRUFBQUksR0FBQSxFQUFBQyxLQUFBLElBQUFELEdBQUEsR0FBQUUsY0FBQSxDQUFBRixHQUFBLE9BQUFBLEdBQUEsSUFBQUosR0FBQSxJQUFBTyxNQUFBLENBQUFDLGNBQUEsQ0FBQVIsR0FBQSxFQUFBSSxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBSSxVQUFBLFFBQUFDLFlBQUEsUUFBQUMsUUFBQSxvQkFBQVgsR0FBQSxDQUFBSSxHQUFBLElBQUFDLEtBQUEsV0FBQUwsR0FBQTtBQUFBLFNBQUFNLGVBQUFNLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxZQUFBLENBQUFGLENBQUEsdUNBQUFDLENBQUEsR0FBQUEsQ0FBQSxHQUFBRSxNQUFBLENBQUFGLENBQUE7QUFBQSxTQUFB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