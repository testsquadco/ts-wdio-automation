"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParentSuiteName = getParentSuiteName;
exports.updateSessionById = updateSessionById;
require("source-map-support/register");
const axios = require('axios');
const {
  version,
  appVersion,
  baseUrl,
  baseUrlApp
} = require("./constants.js");
const logger = require('./logger')(process.env.LT_API_LOG_FILE);
function getParentSuiteName(fullTitle, testSuiteTitle) {
  const fullTitleWords = fullTitle.split(' ');
  const testSuiteTitleWords = testSuiteTitle.split(' ');
  const shortestLength = Math.min(fullTitleWords.length, testSuiteTitleWords.length);
  let c = 0;
  let parentSuiteName = '';
  while (c < shortestLength && fullTitleWords[c] === testSuiteTitleWords[c]) {
    parentSuiteName += fullTitleWords[c++] + ' ';
  }
  return parentSuiteName.trim();
}
async function updateSessionById(sessionId, data, lambdaCredentials) {
  const sessionUrl = lambdaCredentials.isApp ? `${baseUrlApp}${appVersion.latestVersion}/sessions/${sessionId}` : `${baseUrl}${version.latestVersion}/sessions/${sessionId}`;
  let config = {
    method: 'patch',
    maxBodyLength: Infinity,
    url: sessionUrl,
    headers: {
      'accept': 'application/json',
      'Authorization': `Basic ${Buffer.from(lambdaCredentials.username + ':' + lambdaCredentials.accessKey).toString('base64')}`,
      'Content-Type': 'application/json'
    },
    data: data
  };
  try {
    var _response$config;
    let response = await axios.request(config);
    logger.info((response === null || response === void 0 || (_response$config = response.config) === null || _response$config === void 0 ? void 0 : _response$config.data) + (response === null || response === void 0 ? void 0 : response.data));
  } catch (error) {
    logger.error(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsInJlcXVpcmUiLCJ2ZXJzaW9uIiwiYXBwVmVyc2lvbiIsImJhc2VVcmwiLCJiYXNlVXJsQXBwIiwibG9nZ2VyIiwicHJvY2VzcyIsImVudiIsIkxUX0FQSV9MT0dfRklMRSIsImdldFBhcmVudFN1aXRlTmFtZSIsImZ1bGxUaXRsZSIsInRlc3RTdWl0ZVRpdGxlIiwiZnVsbFRpdGxlV29yZHMiLCJzcGxpdCIsInRlc3RTdWl0ZVRpdGxlV29yZHMiLCJzaG9ydGVzdExlbmd0aCIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJjIiwicGFyZW50U3VpdGVOYW1lIiwidHJpbSIsInVwZGF0ZVNlc3Npb25CeUlkIiwic2Vzc2lvbklkIiwiZGF0YSIsImxhbWJkYUNyZWRlbnRpYWxzIiwic2Vzc2lvblVybCIsImlzQXBwIiwibGF0ZXN0VmVyc2lvbiIsImNvbmZpZyIsIm1ldGhvZCIsIm1heEJvZHlMZW5ndGgiLCJJbmZpbml0eSIsInVybCIsImhlYWRlcnMiLCJCdWZmZXIiLCJmcm9tIiwidXNlcm5hbWUiLCJhY2Nlc3NLZXkiLCJ0b1N0cmluZyIsIl9yZXNwb25zZSRjb25maWciLCJyZXNwb25zZSIsInJlcXVlc3QiLCJpbmZvIiwiZXJyb3IiXSwic291cmNlcyI6WyIuLi9zcmMvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7IHZlcnNpb24sIGFwcFZlcnNpb24sIGJhc2VVcmwsIGJhc2VVcmxBcHAgfSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50cy5qc1wiKTtcblxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKShwcm9jZXNzLmVudi5MVF9BUElfTE9HX0ZJTEUpO1xuXG4vKipcbiAqIFtKYXNtaW5lIG9ubHldIEdldCB0aGUgcGFyZW50IHN1aXRlIG5hbWUgb2YgYSB0ZXN0XG4gKiBAcGFyYW0ge3N0cmluZ30gZnVsbFRpdGxlIFxuICogQHBhcmFtIHtzdHJpbmd9IHRlc3RTdWl0ZVRpdGxlIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJlbnRTdWl0ZU5hbWUoZnVsbFRpdGxlLCB0ZXN0U3VpdGVUaXRsZSkge1xuICAgIGNvbnN0IGZ1bGxUaXRsZVdvcmRzID0gZnVsbFRpdGxlLnNwbGl0KCcgJyk7XG4gICAgY29uc3QgdGVzdFN1aXRlVGl0bGVXb3JkcyA9IHRlc3RTdWl0ZVRpdGxlLnNwbGl0KCcgJyk7XG4gICAgY29uc3Qgc2hvcnRlc3RMZW5ndGggPSBNYXRoLm1pbihmdWxsVGl0bGVXb3Jkcy5sZW5ndGgsIHRlc3RTdWl0ZVRpdGxlV29yZHMubGVuZ3RoKTtcbiAgICBsZXQgYyA9IDA7XG4gICAgbGV0IHBhcmVudFN1aXRlTmFtZSA9ICcnO1xuICAgIHdoaWxlIChjIDwgc2hvcnRlc3RMZW5ndGggJiYgZnVsbFRpdGxlV29yZHNbY10gPT09IHRlc3RTdWl0ZVRpdGxlV29yZHNbY10pIHtcbiAgICAgICAgcGFyZW50U3VpdGVOYW1lICs9IGZ1bGxUaXRsZVdvcmRzW2MrK10gKyAnICc7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRTdWl0ZU5hbWUudHJpbSgpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHNlc3Npb24gdXNpbmcgc2Vzc2lvbklkXG4gKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIFxuICogQHBhcmFtIHthbnl9IGRhdGFcbiAqIEBwYXJhbSB7YW55fSBsYW1iZGFDcmVkZW50aWFsc1xuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTZXNzaW9uQnlJZChzZXNzaW9uSWQsIGRhdGEsIGxhbWJkYUNyZWRlbnRpYWxzKXtcbiAgICBjb25zdCBzZXNzaW9uVXJsID0gbGFtYmRhQ3JlZGVudGlhbHMuaXNBcHAgPyBgJHtiYXNlVXJsQXBwfSR7YXBwVmVyc2lvbi5sYXRlc3RWZXJzaW9ufS9zZXNzaW9ucy8ke3Nlc3Npb25JZH1gIDogYCR7YmFzZVVybH0ke3ZlcnNpb24ubGF0ZXN0VmVyc2lvbn0vc2Vzc2lvbnMvJHtzZXNzaW9uSWR9YDtcbiAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICBtZXRob2Q6ICdwYXRjaCcsXG4gICAgICAgIG1heEJvZHlMZW5ndGg6IEluZmluaXR5LFxuICAgICAgICB1cmw6IHNlc3Npb25VcmwsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCYXNpYyAke0J1ZmZlci5mcm9tKGxhbWJkYUNyZWRlbnRpYWxzLnVzZXJuYW1lICsgJzonICsgbGFtYmRhQ3JlZGVudGlhbHMuYWNjZXNzS2V5KS50b1N0cmluZygnYmFzZTY0Jyl9YCxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucmVxdWVzdChjb25maWcpO1xuICAgICAgICBsb2dnZXIuaW5mbyhyZXNwb25zZT8uY29uZmlnPy5kYXRhICsgcmVzcG9uc2U/LmRhdGEpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcik7IFxuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxPQUFPO0VBQUVDLFVBQVU7RUFBRUMsT0FBTztFQUFFQztBQUFXLENBQUMsR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBRTlFLE1BQU1LLE1BQU0sR0FBR0wsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDTSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsZUFBZSxDQUFDO0FBUXhELFNBQVNDLGtCQUFrQkEsQ0FBQ0MsU0FBUyxFQUFFQyxjQUFjLEVBQUU7RUFDMUQsTUFBTUMsY0FBYyxHQUFHRixTQUFTLENBQUNHLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFDM0MsTUFBTUMsbUJBQW1CLEdBQUdILGNBQWMsQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsQ0FBQztFQUNyRCxNQUFNRSxjQUFjLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDTCxjQUFjLENBQUNNLE1BQU0sRUFBRUosbUJBQW1CLENBQUNJLE1BQU0sQ0FBQztFQUNsRixJQUFJQyxDQUFDLEdBQUcsQ0FBQztFQUNULElBQUlDLGVBQWUsR0FBRyxFQUFFO0VBQ3hCLE9BQU9ELENBQUMsR0FBR0osY0FBYyxJQUFJSCxjQUFjLENBQUNPLENBQUMsQ0FBQyxLQUFLTCxtQkFBbUIsQ0FBQ0ssQ0FBQyxDQUFDLEVBQUU7SUFDdkVDLGVBQWUsSUFBSVIsY0FBYyxDQUFDTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUc7RUFDaEQ7RUFDQSxPQUFPQyxlQUFlLENBQUNDLElBQUksQ0FBQyxDQUFDO0FBQ2pDO0FBU08sZUFBZUMsaUJBQWlCQSxDQUFDQyxTQUFTLEVBQUVDLElBQUksRUFBRUMsaUJBQWlCLEVBQUM7RUFDdkUsTUFBTUMsVUFBVSxHQUFHRCxpQkFBaUIsQ0FBQ0UsS0FBSyxHQUFJLEdBQUV2QixVQUFXLEdBQUVGLFVBQVUsQ0FBQzBCLGFBQWMsYUFBWUwsU0FBVSxFQUFDLEdBQUksR0FBRXBCLE9BQVEsR0FBRUYsT0FBTyxDQUFDMkIsYUFBYyxhQUFZTCxTQUFVLEVBQUM7RUFDMUssSUFBSU0sTUFBTSxHQUFHO0lBQ1RDLE1BQU0sRUFBRSxPQUFPO0lBQ2ZDLGFBQWEsRUFBRUMsUUFBUTtJQUN2QkMsR0FBRyxFQUFFUCxVQUFVO0lBQ2ZRLE9BQU8sRUFBRTtNQUNMLFFBQVEsRUFBRSxrQkFBa0I7TUFDNUIsZUFBZSxFQUFHLFNBQVFDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDWCxpQkFBaUIsQ0FBQ1ksUUFBUSxHQUFHLEdBQUcsR0FBR1osaUJBQWlCLENBQUNhLFNBQVMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsUUFBUSxDQUFFLEVBQUM7TUFDMUgsY0FBYyxFQUFFO0lBQ3BCLENBQUM7SUFDRGYsSUFBSSxFQUFFQTtFQUNWLENBQUM7RUFDRCxJQUFJO0lBQUEsSUFBQWdCLGdCQUFBO0lBQ0EsSUFBSUMsUUFBUSxHQUFHLE1BQU0xQyxLQUFLLENBQUMyQyxPQUFPLENBQUNiLE1BQU0sQ0FBQztJQUMxQ3hCLE1BQU0sQ0FBQ3NDLElBQUksQ0FBQyxDQUFBRixRQUFRLGFBQVJBLFFBQVEsZ0JBQUFELGdCQUFBLEdBQVJDLFFBQVEsQ0FBRVosTUFBTSxjQUFBVyxnQkFBQSx1QkFBaEJBLGdCQUFBLENBQWtCaEIsSUFBSSxLQUFHaUIsUUFBUSxhQUFSQSxRQUFRLHVCQUFSQSxRQUFRLENBQUVqQixJQUFJLEVBQUM7RUFDeEQsQ0FBQyxDQUFDLE9BQU9vQixLQUFLLEVBQUU7SUFDWnZDLE1BQU0sQ0FBQ3VDLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO0VBQ3ZCO0FBQ0oiLCJpZ25vcmVMaXN0IjpbXX0=